Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 libfolding (1.0-1) unstable; urgency=medium
 .
   * Initial release (Closes: #nnnn)  <nnnn is the bug number of your ITP>
Author: asr <alban.siffer@irisa.fr>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2018-06-06

--- /dev/null
+++ libfolding-1.0/LICENSE
@@ -0,0 +1,674 @@
+                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
--- /dev/null
+++ libfolding-1.0/Makefile
@@ -0,0 +1,101 @@
+### libfolding makefile
+#
+# @author = asr
+
+### INSTALL DIRECTORIES
+DESTDIR =
+###
+
+
+VERSION = 1.0
+
+# Current directory
+CURDIR = $(realpath .)
+
+# folder of the headers
+INC_DIR = $(CURDIR)/include
+
+# folder of the sources
+SRC_DIR = $(CURDIR)/src
+
+#folder of the built sources
+OBJ_DIR = $(CURDIR)/build
+
+#folder of the shared library
+LIB_DIR = $(CURDIR)/lib
+
+#folder for the testspot
+TEST_DIR = $(CURDIR)/test
+
+
+###
+INSTALL_HEAD_DIR = $(DESTDIR)/usr/include/libfolding
+INSTALL_LIB_DIR = $(DESTDIR)/usr/lib
+###
+
+EXPORT = @export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$(LIB_DIR)
+
+# compiler & flags
+CXX = @c++
+CXXFLAGS = -std=c++11 -Wall -pedantic
+LFLAGS = -L/usr/lib -L/usr/lib/x86_64-linux-gnu -ltbb -larmadillo
+
+# all the files (header, sources, build)
+FILES = pivot.h armaring.h streamfolding.h
+DEPS = $(foreach n,$(FILES),$(INC_DIR)/$(n))
+SRCS = $(foreach n,$(FILES:.h=.cpp),$(SRC_DIR)/$(n)) $(SRC_DIR)/interface.cpp
+OBJS = $(FILES:.h=.o)
+
+
+# library file
+TARGET = libfolding.so
+
+
+### MAKEFILE TARGETS
+all: checkdir $(TARGET)
+
+# create lib/ and build/ directories
+checkdir:
+	@echo
+	@echo "==== libfolding-dev" $(VERSION) "===="
+	@echo
+	@echo "Checking the library directory ("$(LIB_DIR)")"
+	@mkdir -p $(LIB_DIR)
+	@echo "Checking the object directory ("$(OBJ_DIR)")"
+	@mkdir -p $(OBJ_DIR)
+	@echo
+	@echo "[Building sources]"
+
+# create the shared library
+$(TARGET): $(OBJS)
+	@echo
+	@echo "[Building library]"
+	@echo "Building" $@ "..."
+	$(CXX) $(CXXFLAGS) -shared $(foreach n,$^,$(OBJ_DIR)/$(n)) -o $(LIB_DIR)/$@ -fPIC $(LFLAGS);
+	@echo "[done]"
+
+# build source files
+%.o: $(SRC_DIR)/%.cpp
+	@echo "Building" $@ "..."
+	$(CXX) $(CXXFLAGS) $(EXT_INC_DIR) -I $(INC_DIR) -c $< -o $(OBJ_DIR)/$@ -fPIC $(LFLAGS)
+
+
+# test programs
+%.run: $(TEST_DIR)/%.cpp
+	@echo "Building test $@ ..."
+	$(CXX) $(CXXFLAGS) -I$(INC_DIR) -L$(LIB_DIR) -o $(TEST_DIR)/$@ $< -lfolding $(LFLAGS)
+	@echo "Running test ..."
+	$(EXPORT); $(TEST_DIR)/$@
+
+
+test_header:
+	@echo
+	@echo "[Testing]"
+
+
+test: perf.run
+
+clean:
+	@rm -rfd $(OBJ_DIR)
+	@rm -rfd $(LIB_DIR)
+	@rm -rf $(TEST_DIR)/*.run
\ No newline at end of file
--- /dev/null
+++ libfolding-1.0/include/armaring.h
@@ -0,0 +1,136 @@
+//
+// Created by asr on 01/06/18.
+//
+
+#ifndef ARMARING_H
+#define ARMARING_H
+
+#include <armadillo>
+#include "tbb/tbb.h"
+
+using namespace std;
+
+
+class ArmaRing {
+private:
+    /**
+     * The current cursor (index where to insert the next data)
+     */
+    size_t cursor_;
+
+    /**
+     * Maximum size of the ring
+     */
+    size_t max_size_;
+
+    /**
+     * The real data container (a matrix)
+     */
+    arma::mat memory_;
+
+    /**
+     * the last erased data
+     */
+    arma::vec last_erased_;
+
+
+public:
+    /**
+     * The status of the container
+     */
+    enum STATUS : int {
+        INFINITE = -1,
+        UNFILLED = 1,
+        FILLED = 0,
+        ERROR = -3
+    };
+
+    /**
+     * Constructor
+     * @param max_size the size of the container (its size will grow from zero to max_size)
+     */
+    ArmaRing(size_t max_size);
+
+    /**
+     * The main method, which update the container by inserting a new observation
+     * in the index given by cursor_ (it may remove the previous data at this index)
+     * @param v A new observation
+     * @return The final status of the container
+     */
+    int update(arma::vec v);
+
+    /**
+     * Return the current size of the container (the current
+     * number of stored data)
+     * @return
+     */
+    size_t size();
+
+    /**
+     * Compute the folded variance Var|X-s2_star| where X is the stored data (memory_) and
+     * s2_star an external parameter (called "pivot")
+     * @param s2_star The folding pivot
+     * @return Var|X-s2_star|
+     */
+    double folded_var(arma::vec s2_star);
+
+    /**
+     * Dump the current memory (not ranked)
+     * @return
+     */
+    arma::mat dump();
+
+    /**
+     * Get the last erased data
+     * @return
+     */
+    arma::vec get_last_erased();
+};
+
+
+class FoldedVariance {
+    /**
+     * This class aims to compute the folding variance in a
+     * parallel way, through intel threading building block
+     * (intel tbb)
+     */
+private:
+    /**
+     * Pointer to the observations
+     */
+    arma::mat *data_;
+
+    /**
+     * The folding ratio
+     */
+    arma::vec s_;
+
+    /**
+     * First output of the computation: the sum of the observations
+     */
+    double *sum_;
+
+    /**
+     * Second output of the computation: the sum of the squared observations
+     */
+    double *sum2_;
+
+public:
+    /**
+     * Constructor
+     * @param M Input observation (a d x n matrix)
+     * @param s_star the pivot (a vector: d x 1 matrix)
+     * @param sum a pointer to the sum of the observations
+     * @param sum2 a pointer to the sum of the squared observations
+     */
+    FoldedVariance(arma::mat *M, arma::vec &s_star, double *sum, double *sum2);
+
+    /**
+     * Operator for the parallel compuation
+     * @param r the range of the data taken into account
+     */
+    void operator()(const tbb::blocked_range <size_t> &r) const;
+
+};
+
+#endif // ARMARING_H
--- /dev/null
+++ libfolding-1.0/include/pivot.h
@@ -0,0 +1,99 @@
+//
+// Created by asr on 31/05/18.
+//
+
+#ifndef PIVOT_H
+#define PIVOT_H
+
+#include <armadillo>
+
+using namespace std;
+
+
+class Pivot {
+private:
+    /**
+     * The number of observations
+     */
+    size_t n;
+
+    /**
+     * The sum of the observations
+     */
+    arma::vec S_X;
+
+    /**
+    * The sum of Xi Xi' (Xi is an observation)
+    */
+    arma::mat S_X2;
+
+    /**
+     * The sum of the squared norms of the observations
+     */
+    double S_R;
+
+    /**
+     * The covariance between the observations and their norm: cov(X,|X|²) ?
+     */
+    arma::vec V_XR;
+
+    /**
+     * The inverse of XX' where X is the d x n matrice of the n observations already seen
+     */
+    arma::mat V_X_inv;
+
+public:
+    /**
+     * Constructor of a Pivot instance
+     * @param X_init An initial batch of observations (d x n matrix, where d is the dimension and n the number of observations)
+     */
+    Pivot(arma::mat X_init);
+
+
+    /**
+     * Update the internal state by taking into account a new observation
+     * @param X_new A new observation
+     */
+    void add(arma::vec X_new);
+
+    /**
+     * Update the internal state by removing an old observation
+     * @param X_old An old observation
+     */
+    void remove(arma::vec X_old);
+
+    /**
+     * Compute and return the current pivot
+     * @return s*_2
+     */
+    arma::vec s2star();
+
+    /**
+     * Return the mean of the observations
+     * @return mean(X)
+     */
+    arma::mat mean();
+
+    /**
+     * Return the covariance of the observations
+     * @return cov(X)
+     */
+    arma::mat cov();
+
+    /**
+     * Get the current number of observations taken into account
+     * @return n
+     */
+    size_t n_obs();
+
+    /**
+     * Get the dimension of the observations
+     * @return n
+     */
+    size_t dim();
+
+
+};
+
+
+#endif //PIVOT_H
--- /dev/null
+++ libfolding-1.0/include/streamfolding.h
@@ -0,0 +1,114 @@
+//
+// Created by asr on 01/06/18.
+//
+
+#ifndef STREAMFOLDING_H
+#define STREAMFOLDING_H
+
+#include <iostream>
+#include "pivot.h"
+#include "armaring.h"
+
+typedef double (*pvalfun)(double, double);
+
+using namespace std;
+
+/* These constants had been computed
+ * through Monte-Carlo simulation */
+#define pval_a 0.4785
+#define pval_b 0.1946
+#define pval_c 2.0287
+
+
+class StreamFolding {
+private:
+    /**
+     * The dimension of the observations
+     */
+    size_t dimension_;
+
+    /**
+     * Total number of iterations made by the algorithm
+     */
+    size_t iteration_;
+
+    /**
+     * The number of stored observations (size of the sliding window)
+     */
+    size_t depth_;
+
+    /**
+     * A basic indicator of the Pivot initialization
+     */
+    bool initialized_;
+
+    /**
+     * Object to compute the pivot in a streaming fashion
+     */
+    Pivot *pivot_;
+
+    /**
+     * Data container
+     */
+    ArmaRing ring_;
+
+
+public:
+    /**
+     * Constructor
+     * @param depth The size of the sliding window
+     */
+    StreamFolding(size_t depth = 0);
+
+    ~StreamFolding();
+
+    /**
+     * Main method (update the internal state according to a new observation)
+     * @param v A new observation
+     */
+    void update(arma::vec v);
+
+    /**
+     * Check is the Pivot has bee initialized
+     * @return
+     */
+    bool is_initialized();
+
+    /**
+     * Compute the mean of the stored data (use the function of the Pivot object)
+     * @return
+     */
+    arma::mat mean();
+
+    /**
+     * Compute the covariance of the stored data (use the function of the Pivot object)
+     * @return
+     */
+    arma::mat cov();
+
+    /**
+     * Compute the pivot s2*
+     * @return
+     */
+    arma::vec s2star();
+
+    /**
+     * Perform the folding test of unimodality
+     * @param unimodal a pointer to the result of the test (true: unimodal, false: multimodal)
+     * @param p_value a pointer to the significance of the test (the lower, the better,
+     * usually p_value < 0.05 is used as a decision threshold
+     * @return the folding statistics (>=1 means rather unimodal, <1 means rather multimodal)
+     */
+    double folding_test(bool *unimodal, double *p_value);
+
+    /**
+     * Return a dump of the stored data as a d x n matrix where n is the current number of
+     * stored data (equal to the window size in the cruising regime)
+     * @return
+     */
+    arma::mat dump();
+
+};
+
+
+#endif // STREAMFOLDING_H
--- /dev/null
+++ libfolding-1.0/src/armaring.cpp
@@ -0,0 +1,76 @@
+//
+// Created by asr on 01/06/18.
+//
+
+#include "armaring.h"
+
+
+ArmaRing::ArmaRing(size_t max_size) : max_size_(max_size) {
+    this->cursor_ = 0;
+    this->memory_ = arma::mat();
+    this->last_erased_ = arma::vec();
+}
+
+int ArmaRing::update(arma::vec v) {
+
+    if (this->max_size_ == 0) { // infinite
+        this->memory_.insert_cols(this->cursor_, v);
+        this->cursor_++;
+        return ArmaRing::STATUS::INFINITE;
+
+
+    } else if (this->memory_.n_cols < this->max_size_) { // not filled
+        this->memory_.insert_cols(this->cursor_, v);
+        this->cursor_ = (this->cursor_ + 1) % this->max_size_;
+        return ArmaRing::STATUS::UNFILLED;
+
+
+    } else if (this->memory_.n_cols == this->max_size_) { // cruising regime
+        this->last_erased_ = this->memory_.col(this->cursor_);
+        this->memory_.col(this->cursor_) = v;
+        this->cursor_ = (this->cursor_ + 1) % this->max_size_;
+        return ArmaRing::STATUS::FILLED;
+
+    }
+    return ArmaRing::STATUS::ERROR;
+}
+
+size_t ArmaRing::size() {
+    return this->memory_.n_cols;
+}
+
+
+double ArmaRing::folded_var(arma::vec s2_star) {
+    size_t n = this->size();
+    double sum = 0.0;
+    double sum2 = 0.0;
+    FoldedVariance fv(&this->memory_, s2_star, &sum, &sum2);
+    tbb::parallel_for(tbb::blocked_range<size_t>(0, n), fv);
+    return sum2 / n - pow(sum / n, 2.0);
+}
+
+
+arma::mat ArmaRing::dump() {
+    return this->memory_;
+}
+
+
+arma::vec ArmaRing::get_last_erased() {
+    return this->last_erased_;
+}
+
+
+FoldedVariance::FoldedVariance(arma::mat *M, arma::vec &s_star, double *sum, double *sum2) :
+        data_(M), s_(s_star), sum_(sum), sum2_(sum2) {
+}
+
+
+void FoldedVariance::operator()(const tbb::blocked_range <size_t> &r) const {
+    double norm;
+    for (size_t i = r.begin(); i != r.end(); ++i) {
+        norm = arma::norm(this->data_->col(i) - this->s_);
+        *this->sum_ += norm;
+        *this->sum2_ += norm * norm;
+    }
+}
+
--- /dev/null
+++ libfolding-1.0/src/pivot.cpp
@@ -0,0 +1,90 @@
+//
+// Created by asr on 31/05/18.
+//
+
+#include "pivot.h"
+
+using namespace std;
+
+arma::mat sherman_morrison(const arma::mat &Ainv, const arma::vec &u, const arma::vec &v) {
+    arma::rowvec vt = v.t();
+    arma::mat R = (vt * Ainv * u);
+    double r = 1. + R[0];
+    arma::mat B = (1. / r) * Ainv * u * vt * Ainv;
+    return Ainv - B;
+}
+
+
+void inplace_sherman_morrison(arma::mat &Ainv, const arma::vec &u, const arma::vec &v) {
+    arma::rowvec vt = v.t();
+    arma::mat R = (vt * Ainv * u);
+    double r = 1. + R[0];
+    arma::mat B = (1. / r) * Ainv * u * vt * Ainv;
+    Ainv -= B;
+}
+
+
+Pivot::Pivot(arma::mat Xinit) { // Xinit is d x n where d is the dimension
+    int dimension = Xinit.n_rows;
+    arma::mat V_X = Xinit * Xinit.t();
+    this->n = 0;
+    this->S_X = arma::vec(dimension, arma::fill::zeros);
+    this->S_X2 = arma::mat(dimension, dimension, arma::fill::zeros);
+    this->S_R = 0.0;
+    this->V_XR = arma::vec(dimension, arma::fill::zeros);
+    this->V_X_inv = arma::inv_sympd(V_X);
+
+    for (unsigned int i = 0; i < Xinit.n_cols; i++) {
+        this->add(Xinit.col(i));
+    }
+
+}
+
+void Pivot::add(arma::vec X_new) {
+    double R_new = pow(arma::norm(X_new), 2);
+    this->n++;
+    this->S_X += X_new;
+    this->S_X2 += X_new * X_new.t();
+    this->S_R += R_new;
+    this->V_XR += R_new * X_new;
+
+    inplace_sherman_morrison(this->V_X_inv, X_new, X_new);
+
+}
+
+void Pivot::remove(arma::vec X_old) {
+    double R_old = pow(arma::norm(X_old), 2);
+    this->n--;
+    this->S_X -= X_old;
+    this->S_X2 -= X_old * X_old.t();
+    this->S_R -= R_old;
+    this->V_XR -= R_old * X_old;
+
+    inplace_sherman_morrison(this->V_X_inv, -X_old, X_old);
+}
+
+
+arma::vec Pivot::s2star() {
+    double r = 1.0 / n;
+    arma::vec rS_X = r * this->S_X;
+    arma::mat Sigma_inv = this->n * sherman_morrison(this->V_X_inv, -this->S_X, rS_X);
+    arma::mat C = r * (this->V_XR - rS_X * this->S_R);
+    return 0.5 * Sigma_inv * C;
+}
+
+
+arma::mat Pivot::mean() {
+    return this->S_X / (1. * this->n);
+}
+
+
+arma::mat Pivot::cov() {
+    double r = 1.0 / this->n;
+    return (r * this->S_X2) - (r * this->S_X) * (r * this->S_X.t());
+}
+
+
+size_t Pivot::n_obs() {
+    return this->n;
+}
+
--- /dev/null
+++ libfolding-1.0/src/streamfolding.cpp
@@ -0,0 +1,99 @@
+//
+// Created by asr on 01/06/18.
+//
+
+#include "streamfolding.h"
+
+
+double pval(double x, double e) {
+    return pval_a * (1.0 - x) - pval_b * std::log(x) - e;
+}
+
+
+double bisection(pvalfun f, double param, double a, double b, double eps = 1e-12) {
+    double a_ = a;
+    double b_ = b;
+    double m_;
+
+    while ((b_ - a_) > eps) {
+        m_ = .5 * (a_ + b_);
+        if (f(a_, param) * f(m_, param) <= 0) {
+            b_ = m_;
+        } else {
+            a_ = m_;
+        }
+    }
+
+    return m_;
+}
+
+
+StreamFolding::StreamFolding(size_t depth) : depth_(depth), ring_(ArmaRing(depth)) {
+    this->initialized_ = false;
+    this->pivot_ = nullptr;
+    this->iteration_ = 0;
+    this->dimension_ = -1;
+}
+
+StreamFolding::~StreamFolding() {
+    delete this->pivot_;
+}
+
+
+void StreamFolding::update(arma::vec v) {
+    this->iteration_++;
+    int ring_status = this->ring_.update(v);
+
+    if (not this->initialized_) {
+        if (this->iteration_ >= 10) {
+            try {
+                arma::mat X_init = this->ring_.dump();
+                this->pivot_ = new Pivot(X_init);
+                this->initialized_ = true;
+                this->dimension_ = X_init.n_rows;
+            }
+            catch (const std::runtime_error &e) {
+                cout << "[it " << this->iteration_ << "] Pivot initialization failed" << endl;
+            }
+        }
+    } else {
+        this->pivot_->add(v);
+        if (ring_status == ArmaRing::STATUS::FILLED) {
+            this->pivot_->remove(this->ring_.get_last_erased());
+        }
+    }
+
+}
+
+bool StreamFolding::is_initialized() {
+    return this->initialized_;
+}
+
+
+arma::mat StreamFolding::mean() {
+    return this->pivot_->mean();
+}
+
+
+arma::mat StreamFolding::cov() {
+    return this->pivot_->cov();
+}
+
+
+arma::vec StreamFolding::s2star() {
+    return this->pivot_->s2star();
+}
+
+
+double StreamFolding::folding_test(bool *unimodal, double *p_value) {
+    double r = pow(1. + this->dimension_, 2);
+    double Phi = r * this->ring_.folded_var(this->s2star()) / arma::trace(this->cov());
+    *unimodal = (Phi >= 1.0);
+    double e = std::abs(Phi - 1.0) * std::sqrt(1. * this->ring_.size()) / (std::log(1. * this->dimension_) + pval_c);
+    *p_value = bisection(pval, e, 0.0, 1.0);
+    return Phi;
+}
+
+arma::mat StreamFolding::dump() {
+    return this->ring_.dump();
+}
\ No newline at end of file
--- /dev/null
+++ libfolding-1.0/test/main.cpp
@@ -0,0 +1,75 @@
+#include "streamfolding.h"
+#include <iostream>
+
+void inplace_sherman_morrison(arma::mat &Ainv, const arma::vec &u, const arma::vec &v);
+
+int main(int argc, const char *argv[]) {
+
+    arma::arma_rng::set_seed_random();
+    /*arma::mat A(3, 3, arma::fill::randn);
+    const arma::vec u(3, arma::fill::randu);
+    const arma::vec v(3, arma::fill::randu);
+
+    A.print();
+    inplace_sherman_morrison(A, u, v);
+    A.print();*/
+
+    const int N = 5000;
+    const int d = 2;
+
+    arma::mat Cov = 0.5 * arma::ones(d, d) + 0.5 * arma::eye(d, d);
+    Cov.print("Cov : ");
+    arma::vec Mean(d, arma::fill::zeros);
+    Mean.print("Mean : ");
+
+    arma::mat Xinit = arma::mvnrnd(Mean, Cov, N); // size d x N
+
+    StreamFolding sf(2000);
+
+
+    for (size_t i = 0; i < N; i++) {
+        sf.update(Xinit.col(i));
+    }
+
+    sf.cov().print("Covariance : ");
+    sf.s2star().print("s2* :");
+
+    cout << "folding test : " << sf.folding_test() << endl;
+
+
+    //arma::mat V_X_inv_init = Xinit * Xinit.t();
+
+    //V_X_inv_init.print();
+    /*Pivot P(Xinit);
+
+
+
+    cout << P.n_obs() << endl;
+    arma::vec s2 = P.s2star();
+    s2.print("s2 (initial) : ");
+
+    P.cov().print("Empirical Covariance : ");*/
+
+    /*Matrix<3, 4, double> M;
+    M(1, 2) = 5.0;
+    M(2, 1) = 3.0;
+    M(3, 2) = 4.0;
+    M.print();
+
+    Matrix<3, 4, double> K = M * 3;
+    K.print();
+    M.print();*/
+
+    //Matrix<4,3, double> N;
+
+    //Matrix<3, 3, double> C = M*N;
+    //C.print();
+    /*M.print();
+    cout << "M_12: " << M(1,2) << endl;
+    cout << "M_21: " << M(2,1) << endl;
+
+    auto Mt = M.tr();
+    cout << "Mt_12: " << Mt(1,2) << endl;
+    cout << "Mt_21: " << Mt(2,1) << endl;*/
+
+}
\ No newline at end of file
--- /dev/null
+++ libfolding-1.0/test/mvnorm_uni.cpp
@@ -0,0 +1,105 @@
+#include "streamfolding.h"
+#include <iostream>
+#include <sstream>
+#include <iomanip>
+
+/* COLORS FOR FANCY PRINT */
+#define END  "\x1B[0m"
+#define RED  "\x1B[31m"
+#define GRN  "\x1B[32m"
+#define YEL  "\x1B[33m"
+
+#define OK "[" GRN "OK" END "]"
+#define WARNING "[" YEL "WARNING" END "]"
+#define FAIL "[" RED "FAIL" END "]"
+
+#define UNDERLINE "\033[4m"
+
+/* END OF COLORS FOR FANCY PRINT */
+
+int main(int argc, const char *argv[]) {
+
+    arma::arma_rng::set_seed_random();
+
+    const int N = 5000;
+    const int d = 2;
+
+    arma::mat Cov = 0.5 * arma::ones(d, d) + 0.5 * arma::eye(d, d);
+    arma::vec Mean(d, arma::fill::zeros);
+    arma::mat Xinit = arma::mvnrnd(Mean, Cov, N); // size d x N
+
+    StreamFolding sf(2000);
+
+    cout << std::fixed << std::setprecision(2);
+    cout << endl << UNDERLINE << "Testing on a multivariate normal distribution" << END << endl;
+    cout << "Dimension d = " << d << ", #pts = " << N << endl;
+    Mean.print("Mean");
+    Cov.print("Covariance matrix");
+
+
+    for (size_t i = 0; i < N; i++) {
+        sf.update(Xinit.col(i));
+    }
+
+
+    arma::mat D = sf.dump();
+
+
+    cout << std::left;
+    cout << setw(40) << "Checking the mean computation ... ";
+    arma::vec mean_stream = sf.mean();
+    arma::vec mean_batch = arma::mean(D, 1);
+    double mean_delta = arma::norm(mean_batch - mean_stream);
+
+    if (mean_delta < 1e-6) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+    cout << setw(40) << "Checking the variance computation ... ";
+    //cout << "size of D : " << D.n_rows << " x " << D.n_cols << endl;
+    arma::mat cov_batch = arma::cov(D.t());
+    //cout << "size of batch cov : " << cov_batch.n_rows << " x " << cov_batch.n_cols << endl;
+    arma::mat cov_stream = sf.cov();
+
+    //cov_batch.print("Batch cov :");
+
+    double cov_delta = arma::norm(cov_batch - cov_stream);
+    //cout << std::scientific << cov_delta << endl;
+    if (cov_delta < 1e-3) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+
+    cout << setw(40) << "Checking the pivot computation ... ";
+    arma::vec s2_star = sf.s2star();
+    double s2star_delta = arma::norm(s2_star);
+    //cout << s2star_delta << endl;
+    if (s2star_delta < 8e-2) {
+        cout << OK << endl;
+    } else if (s2star_delta < 1e-1) {
+        cout << WARNING << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+
+    bool uni;
+    double pvalue;
+    cout << "Folding Statistics : " << sf.folding_test(&uni, &pvalue) << endl;
+    cout << std::scientific;
+    stringstream ss;
+    ss << "Unimodal ? " << (uni ? "Yes" : "No") << " (p-value: " << pvalue << ")";
+    cout << setw(40) << ss.str();
+
+    if (uni) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+    cout << endl;
+
+}
\ No newline at end of file
--- /dev/null
+++ libfolding-1.0/test/norm_multi.cpp
@@ -0,0 +1,111 @@
+#include "streamfolding.h"
+#include <iostream>
+#include <sstream>
+#include <iomanip>
+
+/* COLORS FOR FANCY PRINT */
+#define END  "\x1B[0m"
+#define RED  "\x1B[31m"
+#define GRN  "\x1B[32m"
+#define YEL  "\x1B[33m"
+
+#define OK "[" GRN "OK" END "]"
+#define WARNING "[" YEL "WARNING" END "]"
+#define FAIL "[" RED "FAIL" END "]"
+
+#define UNDERLINE "\033[4m"
+
+/* END OF COLORS FOR FANCY PRINT */
+
+
+
+int main(int argc, const char *argv[]) {
+
+    arma::arma_rng::set_seed_random();
+
+    const int d = 1;
+
+    const size_t N1 = 2000;
+    const size_t N2 = 8000;
+    size_t N = N1 + N2;
+
+    const double M1 = 0.0;
+    const double M2 = 5.0;
+
+    arma::vec X1 = arma::randn(N1, d) + M1;
+    arma::vec X2 = arma::randn(N2, d) + M2;
+
+    arma::vec Xinit = arma::join_cols(X1, X2); /// size d x (N1+N2)
+
+
+    cout << std::fixed << std::setprecision(2);
+    cout << endl << UNDERLINE << "Testing on a bi-normal distribution" << END << endl;
+    cout << "Mode 1 : µ = " << M1 << ", σ = 1.0, #pts = " << N1 << " (" << (100. * N1 / N) << "%)" << endl;
+    cout << "Mode 2 : µ = " << M2 << ", σ = 1.0, #pts = " << N2 << " (" << (100. * N2 / N) << "%)" << endl;
+    //cout << "Size of Xinit : " << Xinit.n_rows << " x " << Xinit.n_cols << endl;
+
+    arma::rowvec X = arma::shuffle(Xinit).t();
+
+    StreamFolding sf(2000);
+
+
+    for (size_t i = 0; i < N; i++) {
+        sf.update(X.col(i));
+    }
+
+    arma::mat D = sf.dump();
+
+
+    cout << std::left;
+    cout << setw(40) << "Checking the mean computation ... ";
+    arma::vec mean_stream = sf.mean();
+    arma::vec mean_batch = arma::mean(D, 1);
+    double mean_delta = arma::norm(mean_batch - mean_stream);
+
+    if (mean_delta < 1e-6) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+    cout << setw(40) << "Checking the variance computation ... ";
+    arma::mat cov_batch = arma::cov(D, 1);
+    arma::mat cov_stream = sf.cov();
+    double cov_delta = arma::norm(cov_batch - cov_stream);
+
+    if (cov_delta < 1e-6) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+
+    cout << setw(40) << "Checking the pivot computation ... ";
+    arma::vec s2_star = sf.s2star();
+    double s2star_err = arma::norm(s2_star - 0.5 * (M1 + M2)) / std::abs(0.5 * (M1 + M2));
+    //cout << s2star_err << endl;
+    if (s2star_err < 0.11) {
+        cout << OK << endl;
+    } else if (s2star_err < 0.15) {
+        cout << WARNING << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+
+    bool uni;
+    double pvalue;
+    cout << "Folding Statistics : " << sf.folding_test(&uni, &pvalue) << endl;
+    cout << std::scientific;
+    stringstream ss;
+    ss << "Unimodal ? " << (uni ? "Yes" : "No") << " (p-value: " << pvalue << ")";
+    cout << setw(40) << ss.str();
+
+    if (not uni) {
+        cout << OK << endl;
+    } else {
+        cout << FAIL << endl;
+    }
+
+    cout << endl;
+}
\ No newline at end of file
--- /dev/null
+++ libfolding-1.0/test/perf.cpp
@@ -0,0 +1,73 @@
+//
+// Created by asr on 06/06/18.
+//
+
+#include "streamfolding.h"
+#include <iostream>
+#include <sstream>
+#include <iomanip>
+#include <chrono>
+
+using namespace std;
+
+
+using T = std::chrono::steady_clock::time_point;
+using usec = std::chrono::microseconds;
+using sec = std::chrono::seconds;
+//std::chrono::_V2::steady_clock::time_point (*tick)() = std::chrono::steady_clock::now;
+
+/* COLORS FOR FANCY PRINT */
+#define END  "\x1B[0m"
+#define RED  "\x1B[31m"
+#define GRN  "\x1B[32m"
+#define YEL  "\x1B[33m"
+
+#define OK "[" GRN "OK" END "]"
+#define WARNING "[" YEL "WARNING" END "]"
+#define FAIL "[" RED "FAIL" END "]"
+
+#define UNDERLINE "\033[4m"
+/* END OF COLORS FOR FANCY PRINT */
+
+
+/* TIMING FUNCTION */
+int duration(T start, T end) {
+    return std::chrono::duration_cast<usec>(end - start).count();
+}
+
+int operator-(const T &end, const T &start) {
+    return (duration(start, end));
+}
+
+
+int main(int argc, const char *argv[]) {
+
+    arma::arma_rng::set_seed_random();
+
+    const size_t N = 1000000;
+    const size_t max_dim = 5;
+
+    const int w = 15;
+    cout << left;
+    cout << setw(w) << "Dimension";
+    cout << setw(w) << "#data";
+    cout << setw(w) << "Time (µs)";
+    cout << setw(w) << "Speed (it/s)" << endl;
+    for (size_t d = 1; d <= max_dim; d++) {
+        arma::mat Xinit = arma::randu(d, N); // size d x N
+        StreamFolding sf(1000);
+        T start_ = std::chrono::steady_clock::now();
+        for (size_t i = 0; i < N; i++) {
+            sf.update(Xinit.col(i));
+        }
+        T end_ = std::chrono::steady_clock::now();
+
+        cout << setw(w) << d;
+        cout << setw(w) << N;
+        cout << setw(w) << end_-start_;
+        cout << setw(w) << (size_t)(1.0e6*N/(end_-start_)) << endl;
+    }
+
+
+}
+
